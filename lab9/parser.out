Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assign expression
Rule 2     assign -> NAME =
Rule 3     statement -> expression
Rule 4     expression -> expression < expression
Rule 5     expression -> expression > expression
Rule 6     expression -> expression + expression
Rule 7     expression -> expression - expression
Rule 8     expression -> expression * expression
Rule 9     expression -> expression / expression
Rule 10    expression -> ( expression )
Rule 11    expression -> NUMBER
Rule 12    expression -> NAME
Rule 13    statement -> IF expression gofalse THEN statement
Rule 14    gofalse -> <empty>

Terminals, with rules where they appear

(                    : 10
)                    : 10
*                    : 8
+                    : 6
-                    : 7
/                    : 9
<                    : 4
=                    : 2
>                    : 5
IF                   : 13
NAME                 : 2 12
NUMBER               : 11
THEN                 : 13
error                : 

Nonterminals, with rules where they appear

assign               : 1
expression           : 1 3 4 4 5 5 6 6 7 7 8 8 9 9 10 13
gofalse              : 13
statement            : 13 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assign expression
    (3) statement -> . expression
    (13) statement -> . IF expression gofalse THEN statement
    (2) assign -> . NAME =
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    IF              shift and go to state 4
    NAME            shift and go to state 5
    (               shift and go to state 6
    NUMBER          shift and go to state 7

    statement                      shift and go to state 1
    assign                         shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assign . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 8

state 3

    (3) statement -> expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    $end            reduce using rule 3 (statement -> expression .)
    <               shift and go to state 10
    >               shift and go to state 11
    +               shift and go to state 12
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 15


state 4

    (13) statement -> IF . expression gofalse THEN statement
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 16

state 5

    (2) assign -> NAME . =
    (12) expression -> NAME .

    =               shift and go to state 17
    <               reduce using rule 12 (expression -> NAME .)
    >               reduce using rule 12 (expression -> NAME .)
    +               reduce using rule 12 (expression -> NAME .)
    -               reduce using rule 12 (expression -> NAME .)
    *               reduce using rule 12 (expression -> NAME .)
    /               reduce using rule 12 (expression -> NAME .)
    $end            reduce using rule 12 (expression -> NAME .)


state 6

    (10) expression -> ( . expression )
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 18

state 7

    (11) expression -> NUMBER .

    <               reduce using rule 11 (expression -> NUMBER .)
    >               reduce using rule 11 (expression -> NUMBER .)
    +               reduce using rule 11 (expression -> NUMBER .)
    -               reduce using rule 11 (expression -> NUMBER .)
    *               reduce using rule 11 (expression -> NUMBER .)
    /               reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)
    THEN            reduce using rule 11 (expression -> NUMBER .)
    )               reduce using rule 11 (expression -> NUMBER .)


state 8

    (1) statement -> assign expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> assign expression .)
    <               shift and go to state 10
    >               shift and go to state 11
    +               shift and go to state 12
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 15


state 9

    (12) expression -> NAME .

    <               reduce using rule 12 (expression -> NAME .)
    >               reduce using rule 12 (expression -> NAME .)
    +               reduce using rule 12 (expression -> NAME .)
    -               reduce using rule 12 (expression -> NAME .)
    *               reduce using rule 12 (expression -> NAME .)
    /               reduce using rule 12 (expression -> NAME .)
    $end            reduce using rule 12 (expression -> NAME .)
    THEN            reduce using rule 12 (expression -> NAME .)
    )               reduce using rule 12 (expression -> NAME .)


state 10

    (4) expression -> expression < . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 19

state 11

    (5) expression -> expression > . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 20

state 12

    (6) expression -> expression + . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 21

state 13

    (7) expression -> expression - . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 22

state 14

    (8) expression -> expression * . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 23

state 15

    (9) expression -> expression / . expression
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    (               shift and go to state 6
    NUMBER          shift and go to state 7
    NAME            shift and go to state 9

    expression                     shift and go to state 24

state 16

    (13) statement -> IF expression . gofalse THEN statement
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (14) gofalse -> .

    <               shift and go to state 10
    >               shift and go to state 11
    +               shift and go to state 12
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 15
    THEN            reduce using rule 14 (gofalse -> .)

    gofalse                        shift and go to state 25

state 17

    (2) assign -> NAME = .

    (               reduce using rule 2 (assign -> NAME = .)
    NUMBER          reduce using rule 2 (assign -> NAME = .)
    NAME            reduce using rule 2 (assign -> NAME = .)


state 18

    (10) expression -> ( expression . )
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    )               shift and go to state 26
    <               shift and go to state 10
    >               shift and go to state 11
    +               shift and go to state 12
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 15


state 19

    (4) expression -> expression < expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    <               reduce using rule 4 (expression -> expression < expression .)
    >               reduce using rule 4 (expression -> expression < expression .)
    $end            reduce using rule 4 (expression -> expression < expression .)
    THEN            reduce using rule 4 (expression -> expression < expression .)
    )               reduce using rule 4 (expression -> expression < expression .)
    +               shift and go to state 12
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 15

  ! +               [ reduce using rule 4 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 4 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 4 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression < expression .) ]
  ! <               [ shift and go to state 10 ]
  ! >               [ shift and go to state 11 ]


state 20

    (5) expression -> expression > expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    <               reduce using rule 5 (expression -> expression > expression .)
    >               reduce using rule 5 (expression -> expression > expression .)
    $end            reduce using rule 5 (expression -> expression > expression .)
    THEN            reduce using rule 5 (expression -> expression > expression .)
    )               reduce using rule 5 (expression -> expression > expression .)
    +               shift and go to state 12
    -               shift and go to state 13
    *               shift and go to state 14
    /               shift and go to state 15

  ! +               [ reduce using rule 5 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 5 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 5 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression > expression .) ]
  ! <               [ shift and go to state 10 ]
  ! >               [ shift and go to state 11 ]


state 21

    (6) expression -> expression + expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    <               reduce using rule 6 (expression -> expression + expression .)
    >               reduce using rule 6 (expression -> expression + expression .)
    +               reduce using rule 6 (expression -> expression + expression .)
    -               reduce using rule 6 (expression -> expression + expression .)
    $end            reduce using rule 6 (expression -> expression + expression .)
    THEN            reduce using rule 6 (expression -> expression + expression .)
    )               reduce using rule 6 (expression -> expression + expression .)
    *               shift and go to state 14
    /               shift and go to state 15

  ! *               [ reduce using rule 6 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 6 (expression -> expression + expression .) ]
  ! <               [ shift and go to state 10 ]
  ! >               [ shift and go to state 11 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 13 ]


state 22

    (7) expression -> expression - expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    <               reduce using rule 7 (expression -> expression - expression .)
    >               reduce using rule 7 (expression -> expression - expression .)
    +               reduce using rule 7 (expression -> expression - expression .)
    -               reduce using rule 7 (expression -> expression - expression .)
    $end            reduce using rule 7 (expression -> expression - expression .)
    THEN            reduce using rule 7 (expression -> expression - expression .)
    )               reduce using rule 7 (expression -> expression - expression .)
    *               shift and go to state 14
    /               shift and go to state 15

  ! *               [ reduce using rule 7 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression - expression .) ]
  ! <               [ shift and go to state 10 ]
  ! >               [ shift and go to state 11 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 13 ]


state 23

    (8) expression -> expression * expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    <               reduce using rule 8 (expression -> expression * expression .)
    >               reduce using rule 8 (expression -> expression * expression .)
    +               reduce using rule 8 (expression -> expression * expression .)
    -               reduce using rule 8 (expression -> expression * expression .)
    *               reduce using rule 8 (expression -> expression * expression .)
    /               reduce using rule 8 (expression -> expression * expression .)
    $end            reduce using rule 8 (expression -> expression * expression .)
    THEN            reduce using rule 8 (expression -> expression * expression .)
    )               reduce using rule 8 (expression -> expression * expression .)

  ! <               [ shift and go to state 10 ]
  ! >               [ shift and go to state 11 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 14 ]
  ! /               [ shift and go to state 15 ]


state 24

    (9) expression -> expression / expression .
    (4) expression -> expression . < expression
    (5) expression -> expression . > expression
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression

    <               reduce using rule 9 (expression -> expression / expression .)
    >               reduce using rule 9 (expression -> expression / expression .)
    +               reduce using rule 9 (expression -> expression / expression .)
    -               reduce using rule 9 (expression -> expression / expression .)
    *               reduce using rule 9 (expression -> expression / expression .)
    /               reduce using rule 9 (expression -> expression / expression .)
    $end            reduce using rule 9 (expression -> expression / expression .)
    THEN            reduce using rule 9 (expression -> expression / expression .)
    )               reduce using rule 9 (expression -> expression / expression .)

  ! <               [ shift and go to state 10 ]
  ! >               [ shift and go to state 11 ]
  ! +               [ shift and go to state 12 ]
  ! -               [ shift and go to state 13 ]
  ! *               [ shift and go to state 14 ]
  ! /               [ shift and go to state 15 ]


state 25

    (13) statement -> IF expression gofalse . THEN statement

    THEN            shift and go to state 27


state 26

    (10) expression -> ( expression ) .

    <               reduce using rule 10 (expression -> ( expression ) .)
    >               reduce using rule 10 (expression -> ( expression ) .)
    +               reduce using rule 10 (expression -> ( expression ) .)
    -               reduce using rule 10 (expression -> ( expression ) .)
    *               reduce using rule 10 (expression -> ( expression ) .)
    /               reduce using rule 10 (expression -> ( expression ) .)
    $end            reduce using rule 10 (expression -> ( expression ) .)
    THEN            reduce using rule 10 (expression -> ( expression ) .)
    )               reduce using rule 10 (expression -> ( expression ) .)


state 27

    (13) statement -> IF expression gofalse THEN . statement
    (1) statement -> . assign expression
    (3) statement -> . expression
    (13) statement -> . IF expression gofalse THEN statement
    (2) assign -> . NAME =
    (4) expression -> . expression < expression
    (5) expression -> . expression > expression
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . ( expression )
    (11) expression -> . NUMBER
    (12) expression -> . NAME

    IF              shift and go to state 4
    NAME            shift and go to state 5
    (               shift and go to state 6
    NUMBER          shift and go to state 7

    expression                     shift and go to state 3
    statement                      shift and go to state 28
    assign                         shift and go to state 2

state 28

    (13) statement -> IF expression gofalse THEN statement .

    $end            reduce using rule 13 (statement -> IF expression gofalse THEN statement .)

