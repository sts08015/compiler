
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left<>left+-left*/IF NAME NUMBER THENstatement : assign expressionassign : NAME "="statement : expressionexpression : expression \'<\' expression\n                  | expression \'>\' expression\n                  | expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'(\' expression \')\'expression : NUMBERexpression : NAMEstatement : IF expression gofalse THEN statementgofalse  :'
    
_lr_action_items = {'IF':([0,27,],[4,4,]),'NAME':([0,2,4,6,10,11,12,13,14,15,17,27,],[5,9,9,9,9,9,9,9,9,9,-2,5,]),'(':([0,2,4,6,10,11,12,13,14,15,17,27,],[6,6,6,6,6,6,6,6,6,6,-2,6,]),'NUMBER':([0,2,4,6,10,11,12,13,14,15,17,27,],[7,7,7,7,7,7,7,7,7,7,-2,7,]),'$end':([1,3,5,7,8,9,19,20,21,22,23,24,26,28,],[0,-3,-12,-11,-1,-12,-4,-5,-6,-7,-8,-9,-10,-13,]),'<':([3,5,7,8,9,16,18,19,20,21,22,23,24,26,],[10,-12,-11,10,-12,10,10,-4,-5,-6,-7,-8,-9,-10,]),'>':([3,5,7,8,9,16,18,19,20,21,22,23,24,26,],[11,-12,-11,11,-12,11,11,-4,-5,-6,-7,-8,-9,-10,]),'+':([3,5,7,8,9,16,18,19,20,21,22,23,24,26,],[12,-12,-11,12,-12,12,12,12,12,-6,-7,-8,-9,-10,]),'-':([3,5,7,8,9,16,18,19,20,21,22,23,24,26,],[13,-12,-11,13,-12,13,13,13,13,-6,-7,-8,-9,-10,]),'*':([3,5,7,8,9,16,18,19,20,21,22,23,24,26,],[14,-12,-11,14,-12,14,14,14,14,14,14,-8,-9,-10,]),'/':([3,5,7,8,9,16,18,19,20,21,22,23,24,26,],[15,-12,-11,15,-12,15,15,15,15,15,15,-8,-9,-10,]),'=':([5,],[17,]),'THEN':([7,9,16,19,20,21,22,23,24,25,26,],[-11,-12,-14,-4,-5,-6,-7,-8,-9,27,-10,]),')':([7,9,18,19,20,21,22,23,24,26,],[-11,-12,26,-4,-5,-6,-7,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,27,],[1,28,]),'assign':([0,27,],[2,2,]),'expression':([0,2,4,6,10,11,12,13,14,15,27,],[3,8,16,18,19,20,21,22,23,24,3,]),'gofalse':([16,],[25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assign expression','statement',2,'p_statement_assign','lab9.py',51),
  ('assign -> NAME =','assign',2,'p_assign_seen','lab9.py',55),
  ('statement -> expression','statement',1,'p_statement_expr','lab9.py',59),
  ('expression -> expression < expression','expression',3,'p_expression_binop','lab9.py',62),
  ('expression -> expression > expression','expression',3,'p_expression_binop','lab9.py',63),
  ('expression -> expression + expression','expression',3,'p_expression_binop','lab9.py',64),
  ('expression -> expression - expression','expression',3,'p_expression_binop','lab9.py',65),
  ('expression -> expression * expression','expression',3,'p_expression_binop','lab9.py',66),
  ('expression -> expression / expression','expression',3,'p_expression_binop','lab9.py',67),
  ('expression -> ( expression )','expression',3,'p_expression_group','lab9.py',72),
  ('expression -> NUMBER','expression',1,'p_expression_number','lab9.py',76),
  ('expression -> NAME','expression',1,'p_expression_name','lab9.py',81),
  ('statement -> IF expression gofalse THEN statement','statement',5,'p_branch','lab9.py',90),
  ('gofalse -> <empty>','gofalse',0,'p_gofalse','lab9.py',94),
]
