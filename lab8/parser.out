Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assign expression
Rule 2     assign -> NAME =
Rule 3     statement -> expression
Rule 4     expression -> NUMBER
Rule 5     expression -> NAME
Rule 6     expression -> expression + expression
Rule 7     expression -> expression - expression
Rule 8     expression -> expression * expression
Rule 9     expression -> expression / expression
Rule 10    expression -> expression > expression
Rule 11    expression -> expression < expression
Rule 12    expression -> ( expression )

Terminals, with rules where they appear

(                    : 12
)                    : 12
*                    : 8
+                    : 6
-                    : 7
/                    : 9
<                    : 11
=                    : 2
>                    : 10
NAME                 : 2 5
NUMBER               : 4
error                : 

Nonterminals, with rules where they appear

assign               : 1
expression           : 1 3 6 6 7 7 8 8 9 9 10 10 11 11 12
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assign expression
    (3) statement -> . expression
    (2) assign -> . NAME =
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NAME            shift and go to state 4
    NUMBER          shift and go to state 5
    (               shift and go to state 6

    statement                      shift and go to state 1
    assign                         shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assign . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 7

state 3

    (3) statement -> expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    $end            reduce using rule 3 (statement -> expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    >               shift and go to state 13
    <               shift and go to state 14


state 4

    (2) assign -> NAME . =
    (5) expression -> NAME .

    =               shift and go to state 15
    +               reduce using rule 5 (expression -> NAME .)
    -               reduce using rule 5 (expression -> NAME .)
    *               reduce using rule 5 (expression -> NAME .)
    /               reduce using rule 5 (expression -> NAME .)
    >               reduce using rule 5 (expression -> NAME .)
    <               reduce using rule 5 (expression -> NAME .)
    $end            reduce using rule 5 (expression -> NAME .)


state 5

    (4) expression -> NUMBER .

    +               reduce using rule 4 (expression -> NUMBER .)
    -               reduce using rule 4 (expression -> NUMBER .)
    *               reduce using rule 4 (expression -> NUMBER .)
    /               reduce using rule 4 (expression -> NUMBER .)
    >               reduce using rule 4 (expression -> NUMBER .)
    <               reduce using rule 4 (expression -> NUMBER .)
    $end            reduce using rule 4 (expression -> NUMBER .)
    )               reduce using rule 4 (expression -> NUMBER .)


state 6

    (12) expression -> ( . expression )
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 16

state 7

    (1) statement -> assign expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    $end            reduce using rule 1 (statement -> assign expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    >               shift and go to state 13
    <               shift and go to state 14


state 8

    (5) expression -> NAME .

    +               reduce using rule 5 (expression -> NAME .)
    -               reduce using rule 5 (expression -> NAME .)
    *               reduce using rule 5 (expression -> NAME .)
    /               reduce using rule 5 (expression -> NAME .)
    >               reduce using rule 5 (expression -> NAME .)
    <               reduce using rule 5 (expression -> NAME .)
    $end            reduce using rule 5 (expression -> NAME .)
    )               reduce using rule 5 (expression -> NAME .)


state 9

    (6) expression -> expression + . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 17

state 10

    (7) expression -> expression - . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 18

state 11

    (8) expression -> expression * . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 19

state 12

    (9) expression -> expression / . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 20

state 13

    (10) expression -> expression > . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 21

state 14

    (11) expression -> expression < . expression
    (4) expression -> . NUMBER
    (5) expression -> . NAME
    (6) expression -> . expression + expression
    (7) expression -> . expression - expression
    (8) expression -> . expression * expression
    (9) expression -> . expression / expression
    (10) expression -> . expression > expression
    (11) expression -> . expression < expression
    (12) expression -> . ( expression )

    NUMBER          shift and go to state 5
    NAME            shift and go to state 8
    (               shift and go to state 6

    expression                     shift and go to state 22

state 15

    (2) assign -> NAME = .

    NUMBER          reduce using rule 2 (assign -> NAME = .)
    NAME            reduce using rule 2 (assign -> NAME = .)
    (               reduce using rule 2 (assign -> NAME = .)


state 16

    (12) expression -> ( expression . )
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    )               shift and go to state 23
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    >               shift and go to state 13
    <               shift and go to state 14


state 17

    (6) expression -> expression + expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    +               reduce using rule 6 (expression -> expression + expression .)
    -               reduce using rule 6 (expression -> expression + expression .)
    >               reduce using rule 6 (expression -> expression + expression .)
    <               reduce using rule 6 (expression -> expression + expression .)
    $end            reduce using rule 6 (expression -> expression + expression .)
    )               reduce using rule 6 (expression -> expression + expression .)
    *               shift and go to state 11
    /               shift and go to state 12

  ! *               [ reduce using rule 6 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 6 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! >               [ shift and go to state 13 ]
  ! <               [ shift and go to state 14 ]


state 18

    (7) expression -> expression - expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    +               reduce using rule 7 (expression -> expression - expression .)
    -               reduce using rule 7 (expression -> expression - expression .)
    >               reduce using rule 7 (expression -> expression - expression .)
    <               reduce using rule 7 (expression -> expression - expression .)
    $end            reduce using rule 7 (expression -> expression - expression .)
    )               reduce using rule 7 (expression -> expression - expression .)
    *               shift and go to state 11
    /               shift and go to state 12

  ! *               [ reduce using rule 7 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! >               [ shift and go to state 13 ]
  ! <               [ shift and go to state 14 ]


state 19

    (8) expression -> expression * expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    +               reduce using rule 8 (expression -> expression * expression .)
    -               reduce using rule 8 (expression -> expression * expression .)
    *               reduce using rule 8 (expression -> expression * expression .)
    /               reduce using rule 8 (expression -> expression * expression .)
    >               reduce using rule 8 (expression -> expression * expression .)
    <               reduce using rule 8 (expression -> expression * expression .)
    $end            reduce using rule 8 (expression -> expression * expression .)
    )               reduce using rule 8 (expression -> expression * expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]
  ! >               [ shift and go to state 13 ]
  ! <               [ shift and go to state 14 ]


state 20

    (9) expression -> expression / expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    +               reduce using rule 9 (expression -> expression / expression .)
    -               reduce using rule 9 (expression -> expression / expression .)
    *               reduce using rule 9 (expression -> expression / expression .)
    /               reduce using rule 9 (expression -> expression / expression .)
    >               reduce using rule 9 (expression -> expression / expression .)
    <               reduce using rule 9 (expression -> expression / expression .)
    $end            reduce using rule 9 (expression -> expression / expression .)
    )               reduce using rule 9 (expression -> expression / expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]
  ! >               [ shift and go to state 13 ]
  ! <               [ shift and go to state 14 ]


state 21

    (10) expression -> expression > expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    >               reduce using rule 10 (expression -> expression > expression .)
    <               reduce using rule 10 (expression -> expression > expression .)
    $end            reduce using rule 10 (expression -> expression > expression .)
    )               reduce using rule 10 (expression -> expression > expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12

  ! +               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression > expression .) ]
  ! >               [ shift and go to state 13 ]
  ! <               [ shift and go to state 14 ]


state 22

    (11) expression -> expression < expression .
    (6) expression -> expression . + expression
    (7) expression -> expression . - expression
    (8) expression -> expression . * expression
    (9) expression -> expression . / expression
    (10) expression -> expression . > expression
    (11) expression -> expression . < expression

    >               reduce using rule 11 (expression -> expression < expression .)
    <               reduce using rule 11 (expression -> expression < expression .)
    $end            reduce using rule 11 (expression -> expression < expression .)
    )               reduce using rule 11 (expression -> expression < expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12

  ! +               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression < expression .) ]
  ! >               [ shift and go to state 13 ]
  ! <               [ shift and go to state 14 ]


state 23

    (12) expression -> ( expression ) .

    +               reduce using rule 12 (expression -> ( expression ) .)
    -               reduce using rule 12 (expression -> ( expression ) .)
    *               reduce using rule 12 (expression -> ( expression ) .)
    /               reduce using rule 12 (expression -> ( expression ) .)
    >               reduce using rule 12 (expression -> ( expression ) .)
    <               reduce using rule 12 (expression -> ( expression ) .)
    $end            reduce using rule 12 (expression -> ( expression ) .)
    )               reduce using rule 12 (expression -> ( expression ) .)

